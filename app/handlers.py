from telethon import events, Button
from telethon.errors import UserIsBlockedError
from telethon.tl.types import InputPeerUser

from app.db import *
from app import bot
import random
import string
import os

from app.session import get_bot_users
from config import SUPER_ADMIN


def generate_option(task):
    msg = f'<b>–ë–∞—à“°–æ—Ä—Ç—Å–∞</b>\n' \
          f'{task["ba"]}\n' \
          f'<b>–†—É—Å—Å–∞</b>\n' \
          f'{task["ru"]}\n' \
          f'<b>–ú”ô“ì”ô–Ω”ô“ª–µ –¥”©—Ä”©“´ —Ç”ô—Ä–∂–µ–º”ô –∏—Ç–µ–ª–≥”ô–Ω–º–µ?</b>'

    return msg, task["id"]


@bot.on(events.NewMessage(func=lambda e: e.text.lower() == '/start'))
async def on_start(event: events.ChatAction.Event):
    hi_msg = f'–°”ô–ª”ô–º, <b>{event.chat.first_name} {event.chat.last_name}</b>.\n' \
             f'–ë—ã–ª —á–∞—Ç –±–∞—à“°–æ—Ä—Ç-—Ä—É—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å –∫–æ—Ä–ø—É—Å—ã–Ω—ã“£ –∫“Ø–ª”ô–º–µ–Ω –∞—Ä—Ç—Ç—ã—Ä—ã—É ”©—Å”©–Ω —ç—à–ª”ô–Ω–≥”ô–Ω. ' \
             f'–ê“ô–∞“° –±—ã–ª —ç—à—Ç”ô—Ä  ru.glosbe.com/ru/ba, bashkortsoft.ru “ª”ô–º –±–∞—à“°–∞ –º–∞—à–∏–Ω–∞ —è—Ä“ô–∞–º—ã–Ω–¥–∞ —Ç”ô—Ä–∂–µ–º”ô –∏—Ç–µ“Ø —Å–∞–π—Ç—Ç–∞—Ä—ã–Ω–¥–∞ “°—É–ª–ª–∞–Ω—ã–ª–∞—Å–∞“°.\n\n' \
             f'<b>–ù–∏—Å–µ–∫ “ª–∏–Ω –±–µ“ô–≥”ô —è—Ä“ô–∞–º –∏—Ç”ô –∞–ª–∞“£?</b>\n' \
             f'”ò–π—Ç”ô–π–µ–∫, –±–µ“ô“ô”ô –±–µ—Ä ”ô“´”ô—Ä –∏–∫–µ —Ç–µ–ª–¥”ô –±–∞—Ä. ' \
             f'–ò“£ —Ç”ô“Ø“ô”ô –±–µ“ô –∞–≤—Ç–æ–º–∞—Ç–∏–∫ —Ä”ô“Ø–µ—à—Ç”ô “ª”ô—Ä –±–∞—à“°–æ—Ä—Ç “ª”©–π–ª”ô–º–µ–Ω–µ“£ —Ä—É—Å –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω–¥–∞ –±—É–ª“ì–∞–Ω —Ç”ô—Ä–∂–µ–º”ô“ª–µ–Ω —Ç–∞–±–∞–±—ã“ô. ' \
             f'”ò–º–º”ô –±—ã–ª “ì—ã–Ω–∞ –∫–æ—Ä–ø—É—Å —Ç”©“ô”©“Ø–≥”ô –µ—Ç–º”ô–π. –ë–µ“ô–≥”ô –∫–µ—à–µ–Ω–µ“£ “°–∞—Ä–∞–ø —Å—ã“ì—ã—É—ã –∫”ô—Ä”ô–∫. \n\n' \
             f'“∫–µ“ô–≥”ô –∏–∫–µ —Ç–µ–ª–¥”ô “ª”©–π–ª”ô–º –±–∏—Ä–µ–ª”ô: –±–∞—à“°–æ—Ä—Ç—Å–∞ “ª”ô–º —à—É–ª “ª”©–π–ª”ô–º–¥–µ“£ —Ä—É—Å—Å–∞ —Ç”ô—Ä–∂–µ–º”ô“ª–µ. ' \
             f'“∫–µ“ô —à—É–ª —Ç”ô—Ä–∂–µ–º”ô <b>–±”©—Ç–∫”ô–Ω—Å–µ –º”ô“ì”ô–Ω”ô–Ω–µ –¥”©—Ä”©“´ –µ—Ç–∫–µ—Ä”ô–º–µ</b>, —à—É–Ω—ã ”ô–π—Ç–µ—Ä–≥”ô —Ç–µ–π–µ—à“ª–µ–≥–µ“ô. \n' \
             f'–ë–∞—à–ª–∞–Ω—ã“°!'

    await event.respond(hi_msg)
    await send_next_task(event)


async def send_next_task(event: events.ChatAction.Event, user=None):
    task = get_next_task()
    if task is not None:
        msg, id = generate_option(task)
        keyboard = [
            [
                Button.inline("üëé", f'{id} 0'),
                Button.inline("üëç", f'{id} 1'),
            ]
        ]

        if user is None:
            await event.respond(msg, buttons=keyboard)
        else:
            try:
                await bot.send_message(user, msg, buttons=keyboard)
            except UserIsBlockedError:
                # add_blocked_user(user)
                return False
        return True


@bot.on(events.CallbackQuery)
async def callback(event):
    id, res = event.data.decode("utf-8").split(' ')

    if id == "-1":
        await send_next_task(event)
        return

    task = get_raw_pair(id)
    msg = f'<b>–ë–∞—à“°–æ—Ä—Ç—Å–∞</b>\n' \
          f'{task["ba"]}\n' \
          f'<b>–†—É—Å—Å–∞</b>\n' \
          f'{task["ru"]}\n' \
          f'“∫–µ“ô {"üëç" if res == "1" else "üëé"} —Ç–∏–ø —è—É–∞–ø –±–∏—Ä“ô–µ–≥–µ“ô. –†”ô—Ö–º”ô—Ç! –ö–∏–ª”ô“ª–µ —ç—à:'

    save_user_answer(id, res, event.chat.username, event.chat_id)
    print(id, res)
    await event.edit(msg)
    await send_next_task(event)


@bot.on(events.NewMessage(func=lambda e: e.text.lower() == '/download'))
async def on_download_results(event: events.ChatAction.Event):
    results = get_success_results()
    file_prefix = ''.join(
        random.choices(string.ascii_uppercase + string.digits, k=7))
    with open(file_prefix + ".ba-ru.tsv", "wt") as bf:
        bf.write(
            f'–î–∞—Ç–∞\t–ë–∞—à“°–æ—Ä—Ç—Å–∞\t–†—É—Å—Å–∞\n')

        for result in results:
            bf.write(
                f'{result["date"]}\t{result["ba"].strip()}\t{result["ru"].strip()}\n')

    await bot.send_file(event.chat.username, file_prefix + ".ba-ru.tsv")

    os.remove(file_prefix + ".ba-ru.tsv")


@bot.on(events.NewMessage(func=lambda e: e.text.lower() == '/stat'))
async def on_download_results(event: events.ChatAction.Event):
    result = get_stat()
    users = get_bot_users()

    msg = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n' \
          f'–Ø—Ä“ô–∞–º—Å—ã–ª–∞—Ä “ª–∞–Ω—ã: {len(users)}\n' \
          f'“∫”©–π–ª”ô–º–¥”ô—Ä “ª–∞–Ω—ã: {result.get("pairs", 0)}\n' \
          f'–î”©—Ä”©“´ —Ç–∏–ø —Ç–∏–∫—à–µ—Ä–µ–ª–≥”ô–Ω–µ: {result.get("success")}\n' \
          f'–•–∞—Ç–∞–ª—ã —Ç–∏–ø —Ç–∏–∫—à–µ—Ä–µ–ª–≥”ô–Ω–µ: {result.get("fail")}\n'
    await bot.send_message(event.chat.username, msg)


@bot.on(events.NewMessage(func=lambda e: '/all-stats' in e.text))
async def send_stats_for_all(event: events.ChatAction.Event):
    if event.chat.username.lower() != SUPER_ADMIN:
        return

    users = get_bot_users()
    result = get_stat()

    admin_msg = event.text.replace('/all-stats ', '')

    msg = f'{admin_msg}\n\n<b>”ò–ª–µ–≥–µ –≤–∞“°—ã—Ç“°–∞ “ª”©“ô”©–º—Ç”ô:</b>\n' \
          f'–ë”©—Ç”ô“ª–µ —Ç–∏–∫—à–µ—Ä–µ–ª–≥”ô–Ω: {result.get("success") + result.get("fail")}\n' \
          f'–î”©—Ä”©“´ —Ç–∏–ø —Ç–∏–∫—à–µ—Ä–µ–ª–≥”ô–Ω–µ: {result.get("success")}\n' \
          f'–•–∞—Ç–∞–ª—ã —Ç–∏–ø —Ç–∏–∫—à–µ—Ä–µ–ª–≥”ô–Ω–µ: {result.get("fail")}\n' \
          f'–Ø—Ä“ô–∞–º—Å—ã–ª–∞—Ä “ª–∞–Ω—ã: {len(users)}\n' \
          f'“∫”©–π–ª”ô–º–¥”ô—Ä “ª–∞–Ω—ã: {result.get("pairs", 0)}\n'

    for r in users:
        # user_stat = get_user_stat(r)
        # user_msg = msg.replace("$$$", f"“∫–∏–Ω —Ç–∏–∫—à–µ—Ä–≥”ô–Ω–µ: {user_stat}")
        keyboard = [
            [
                Button.inline("–î–∞—É–∞–º –∏—Ç–µ—Ä–≥”ô", f'-1 -1'),
            ]
        ]
        user = InputPeerUser(r['id'], r['hash'])
        try:
            await bot.send_message(user, msg, buttons=keyboard)
        except UserIsBlockedError:
            pass
            # add_blocked_user(r)


@bot.on(events.NewMessage(func=lambda e: '/spam2all' in e.text))
async def admin_send_messages_to_all(event: events.ChatAction.Event):
    if event.chat.username.lower() != SUPER_ADMIN:
        return

    users = get_bot_users()

    sended_users = []
    new_blocked_users = []
    for r in users:
        user = InputPeerUser(r['id'], r['hash'])
        send_success = await send_next_task(None, user)
        if send_success:
            sended_users.append(r['name'])
        else:
            new_blocked_users.append(r['name'])

    await bot.send_message(event.chat.username,
                           f"–û—à–æ–ª–∞—Ä“ì–∞ —Ö–∞—Ç –µ–±”ô—Ä–µ–ª–¥–µ: ({len(sended_users)}),\n”ô –±—ã–ª–∞—Ä—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏—Ç—Ç–µ: {new_blocked_users}({len(new_blocked_users)})")


@bot.on(events.NewMessage(func=lambda e: '/test' in e.text))
async def admin_send_all_stats(event: events.ChatAction.Event):
    if event.chat.username.lower() != SUPER_ADMIN:
        return

    users = get_bot_users()

    await bot.send_message(event.chat.username, f'users: {len(users)}')
